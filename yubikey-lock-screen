#!/usr/bin/env bash
# shellcheck disable=SC2128
SOURCED=false && [ "$0" = "$BASH_SOURCE" ] || SOURCED=true

config_ask_confirmation=false
config_warn_nolock=false
config_unlock_timeout=30
config_multikey=false

no_ask_confirmation=false
no_warn_nolock=false
no_multikey=false

ask_confirmation=false
warn_nolock=false
unlock_timeout=30
multikey=false

action='none'
device_serial=0

man=false
debug=false
verbose=false

read -rd '' docstring <<EOF
Usage:
  yubikey-lock-screen [options]
                      [ (--ask-confirmation|--no-ask-confirmation) ]
                      [ (--warn-nolock|--no-warn-nolock) ]
                      [ (--multikey|--no-multikey) ]
                      [ --unlock-timeout <mins> ]
                      <action> <device_serial>
  yubikey-lock-screen ( -h | --help | --man )
  yubikey-lock-screen ( --version )

  Arguments:
    <action>                Yubikey action (one of: add, remove, change).
    <device_serial>         Yubikey short serial number.

  Options:
    -a, --ask-confirmation        Ask confirmation before locking.
    --no-ask-confimation          Don't ask for confirmation before locking.
    -w, --warn-nolock             Show a warning popup when a .nolock file is
                                  present.
    --no-warn-nolock              Don't show a warning popup when a .nolock
                                  file is present.
    -m, --multikey                Enable multikey support.
    --no-multikey                 Disable multikey support.
    -u, --unlock-timeout <mins>   Timeout in minutes after which the possibility
                                  to unlock the screen with the Yubikey expires.
    -d, --debug                   Enable debug mode (implies --verbose).
    -v, --verbose                 Generate verbose output.
    -h, --help                    Show this help message and exits.
    --man                         Show an extended help message.
    --version                     Print version and copyright information.
----
yubikey-lock-screen 0.1.0
copyright (c) 2018 Cristian Consonni
MIT License
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
EOF

eval "$(echo "$docstring" | docopts -V - -h - : "$@" )"

#################### bash strict mode
if ! $SOURCED; then
  set -euo pipefail
  IFS=$'\n\t'
fi
##############################################################################

#################### Utils
# --debug implies --verbose
if $debug; then
  verbose=true
fi

if $debug; then
  echodebug() {
    echo -en "[$(date '+%F %H:%M:%S')][debug]  \\t($BASH_LINENO): "
    echo "$@"
  }
else
  echodebug() { true; }
fi

if $verbose; then
  echoinfo() {
    echo -en "[$(date '+%F %H:%M:%S')][info]   \\t"
    echo "$@"
  }
else
  echoinfo() { true; }
fi

echoerror() {
  (>&2 echo -en "[$(date '+%F %H:%M:%S')][error]  \\t" )
  (>&2 echo "$@" )
}

echowarning() {
  (>&2 echo -en "[$(date '+%F %H:%M:%S')][warning]\\t" )
  (>&2 echo "$@" )
}

bold()          { ansi 1 "$@"; }
italic()        { ansi 3 "$@"; }
underline()     { ansi 4 "$@"; }
strikethrough() { ansi 9 "$@"; }
ansi()          { echo -e "\\e[${1}m${*:2}\\e[0m"; }
##############################################################################


#################### Documentation helpers
function print_help() {
  eval "$(echo "$docstring" | docopts -V - -h - : '-h' | head -n -1)"
}

function print_man() {

  print_help

  echo -e "$(cat <<MANPAGE

$(bold REFERENCES)

Idea and basic setup taken from:
 * [[HOW TO] - [Linux / Debian] Login, lock/unlock screensaver][1]

[1]: https://forum.yubico.com/viewtopic.php?f=23&t=1143

MANPAGE
)"
}
##############################################################################

#################### functions
# Simple config file that supports comments
# See:
#   * Bash parsing variables from config file
#     https://stackoverflow.com/questions/16571739/
function parse_config() {

  local configfile="$1"

  while IFS='= ' read -r lhs rhs; do
    if [[ ! $lhs =~ ^\ *# && -n $lhs ]]; then
        rhs="${rhs%%\#*}"     # Del in line right comments
        rhs="${rhs%%*( )}"    # Del trailing spaces
        rhs="${rhs%\"*}"      # Del opening string quotes
        rhs="${rhs#\"*}"      # Del closing string quotes

        echodebug "(parse_config) declare -g config_$lhs=$rhs"
        declare -g config_"$lhs"="$rhs"

    fi
  done < "$configfile"
}

function preauth() {

  local username="$1"
  local serialno="$2"
  local auth_file
  auth_file="/home/$username/.yubico/yubikey-screensaver/authorized_yubikeys"

  echodebug "(preauth) username: $username"
  echodebug "(preauth) serialno: $serialno"
  echodebug "(preauth) auth_file: $auth_file"

  if awk -F':' '{print $1}' "${auth_file}" | grep -qE "^${serialno}$"; then
    echodebug '(preauth) return 0'
    return 0
  else
    echodebug '(preauth) return 1'
    return 1
  fi
}

function chalresp() {

  local username="$1"
  local serialno="$2"
  local yubikey_response
  local expected_response
  local auth_file
  auth_file="/home/$username/.yubico/yubikey-screensaver/authorized_yubikeys"

  msg="[yubikey] yubiKey: ID_SERIAL_SHORT: $serialno - key preauthorized"
  echoinfo "$msg"
  logger "$msg"

  yubikey_response="$(ykchalresp -2 -x "$serialno")"
  expected_response="$(grep -E "^${serialno}:" "${auth_file}" | \
                       awk -F':' '{print $2}')"
  if [[ "$yubikey_response" == "$expected_response" ]]; then
    echodebug '(chalresp) return 0'
    return 0
  else
    echodebug '(chalresp) return 1'
    return 1
  fi

}
##############################################################################

#################### man
# if --man is used, print the man page
if $man; then
  print_man
  exit 0
fi
##############################################################################

#################### params
# tested with just 1 user at the moment
username="$(who -u | awk '{print $1}' | sort | uniq)"
uid=$(id -u "$username")

echodebug "action: $action"
echodebug "username (uid): $username ($uid)"
##############################################################################

authorized_yubikeys_file="/home/$username/"
authorized_yubikeys_file+=".yubico/yubikey-screensaver/authorized_yubikeys"
# if no file authorized_yubikeys is found exit
if [ ! -f "$authorized_yubikeys_file" ]; then
  errormsg="[yubikey] file $authorized_yubikeys_file not found"

  echoerror "$errormsg"
  logger "$errormsg"
  exit 1
fi

auth_keys_perm="$(stat -c '%a' "$authorized_yubikeys_file" )"
if ! [ "$auth_keys_perm" == '600' ]; then
  errormsg="[yubikey] file $authorized_yubikeys_file must have permission 600"

  echoerror "$errormsg"
  logger "$errormsg"
  exit 1
fi

# if no file authorized_yubikeys is found exit
configfile="/home/$username/.yubico/yubikey-screensaver/"
configfile+='yubikey-screensaver.conf'
echodebug "configfile: $configfile"
if [ -f "$configfile" ]; then
  parse_config "$configfile"
fi

echodebug "#################### config"
echodebug "config_warn_nolock: $config_warn_nolock"
echodebug "config_unlock_timeout $config_unlock_timeout"
echodebug "config_multikey: $config_multikey"

echodebug "#################### cli"
echodebug "ask_confirmation: $ask_confirmation"
echodebug "warn_nolock: $warn_nolock"
echodebug "unlock_timeout: $unlock_timeout"
echodebug "multikey: $multikey"
echodebug "####################"

if ! $ask_confirmation; then
  if $no_ask_confirmation; then
    ask_confirmation=false
  else
    ask_confirmation="$config_ask_confirmation"
  fi
fi

if ! $warn_nolock; then
  if $no_warn_nolock; then
    warn_nolock=false
  else
    warn_nolock="$config_warn_nolock"
  fi
fi

if [ -z "$unlock_timeout" ]; then
  unlock_timeout="$config_unlock_timeout"
fi

if ! $multikey; then
  if $no_multikey; then
    multikey=false
  else
    multikey="$config_multikey"
  fi
fi

echodebug "#################### final"
echodebug "ask_confirmation: $ask_confirmation"
echodebug "warn_nolock: $warn_nolock"
echodebug "unlock_timeout: $unlock_timeout"
echodebug "multikey: $multikey"
echodebug "####################"

# get D-bus session
# shellcheck disable=SC1090
source "/run/user/$uid/dbus-session"
export DBUS_SESSION_BUS_ADDRESS
export DISPLAY=':0'

echodebug "DBUS_SESSION_BUS_ADDRESS: $DBUS_SESSION_BUS_ADDRESS"
echodebug "DISPLAY: $DISPLAY"

# delete the lock if older than 30 minutes
if [ -f "/run/user/$uid/yubikey-lock-screen" ]; then
  msg='[yubikey] remove lock file, older than 30 minutes'
  echoinfo "$msg"
  logger "$msg"

  find "/run/user/$uid/yubikey-lock-screen" \
    -type f -empty -cmin "+$unlock_timeout" -exec rm "{}" \; || true
fi

if [ -n "${USER-}" ] && [[ "$USER" == "$username" ]]; then
  screen_locked=$(dbus-send --print-reply \
                            --dest=com.canonical.Unity \
                              /com/canonical/Unity/Session \
                              com.canonical.Unity.Session.IsLocked | \
                    grep -q "true" && echo true || echo false )
else
  # shellcheck disable=SC1004
  screen_locked=$(/bin/su "$username" -c \
                      'dbus-send --print-reply \
                                 --dest=com.canonical.Unity \
                                   /com/canonical/Unity/Session \
                                   com.canonical.Unity.Session.IsLocked | \
                    grep -q "true" && echo true || echo false' )
fi
msg="[yubikey] screen_locked: $screen_locked"
echoinfo "$msg"
logger "$msg"

yubicokeys=$(lsusb | grep 'Yubico' | \
                     awk -F':' '{print $1}' | \
                     sed -r 's#Bus ([0-9]+) Device ([0-9]+)#\1:\2#g' || true )
key_preauthorized=false
found_key=false

serialno=''
if [ ! -z "$yubicokeys" ]; then
  for serdev in $yubicokeys; do
    serialno=$(lsusb -v -s "$serdev" | \
                    grep iSerial | awk '{ print $NF }' \
                    || true )

    if ! $multikey; then
      if [[ "$device_serial" != "$serialno" ]]; then
        continue
      fi
    fi

    preauth "$username" "$serialno" && \
      key_preauthorized=true || key_preauthorized=false

    if $key_preauthorized; then
      echodebug "key_preauthorized: $key_preauthorized"

      if chalresp "$username" "$serialno"; then
        echodebug "challenge-response succeded"
        found_key=true
        break;
      else
        echodebug "challenge-response failed"
        found_key=false
      fi
    fi
  done
fi
echodebug "found_key: $found_key"

# if /home/$username/.yubico/.nolock is present, set no_lock
no_lock=false
if [ -f "/home/$username/.yubico/yubikey-screensaver/.nolock" ]; then
  no_lock=true

  msg='[yubikey] no_lock set'
  echoinfo "$msg"
  logger "$msg"
fi

if [[ ($action == 'remove' || $action == 'change') ]] && (! $found_key); then
  msg='[yubikey] yubikey removed or changed'
  echoinfo "$msg"
  logger "$msg"

  if ! $screen_locked; then
    if $no_lock; then
      # file .nolock found
      if $warn_nolock; then
        zenity \
          --warning \
          --title='Warnging' \
          --text='.nolock file found, not locking screen' \
            2>/dev/null &
      fi
    else
      # can lock
      if $ask_confirmation; then
        dialog_response=''
        if zenity \
            --question \
            --title='Confirm' \
            --cancel-label="Don't lock" \
            --ok-label='Lock' \
            --text='Please confirm screen lock'\
              2>/dev/null; then
          dialog_response='lock'
        else
          dialog_response='nolock'
        fi

        echodebug "dialog_response: $dialog_response"

        if [[ "$dialog_response" == 'lock' ]]; then
          no_lock=false
        else
          no_lock=true
        fi
      fi

      echodebug "no_lock: $no_lock"
    fi

    if ! $no_lock; then
      msg='[yubikey] locking screen'
      echoinfo "$msg"
      logger "$msg"

      # Running the screensaver lock command
      if [ -n "${USER-}" ] && [[ "$USER" == "$username" ]]; then
        /usr/bin/gnome-screensaver-command --lock
      else
        /bin/su "$username" \
          -c '/usr/bin/gnome-screensaver-command --lock'
      fi

      touch "/run/user/$uid/yubikey-lock-screen"
    else
      msg='[yubikey] no_lock set, not locking screen'
      echoinfo "$msg"
      logger "$msg"
    fi

  else
    msg='[yubikey] screen already locked, doing nothing'
    echoinfo "$msg"
    logger "$msg"
  fi

elif [[ $action == 'add' ]] && $found_key; then
  msg='[yubikey] yubikey found, unlocking screensaver if found'
  echoinfo "$msg"
  logger "$msg"

  # does not work with Unity's lock screen
  # Running the screensaver unlock command
  # /bin/su $username \
  #  -c "/usr/bin/gnome-screensaver-command --deactivate"

  if $screen_locked; then
    if [ -f "/run/user/$uid/yubikey-lock-screen" ]; then
      msg='[yubikey] screen was locked with yubikey'
      echoinfo "$msg"
      logger "$msg"

      if $screen_locked; then
        # unlocks all sessions, ok if there is only one user
        msg='[yubikey] unlocking screen'
        echoinfo "$msg"
        logger "$msg"

        loginctl unlock-sessions
      fi

      msg='[yubikey] remove lock file'
      echoinfo "$msg"
      logger "$msg"
      rm -f "/run/user/$uid/yubikey-lock-screen"
    else
      msg='[yubikey] screen was not locked with yubikey'
      echoinfo "$msg"
      logger "$msg"
    fi
  else
    msg='[yubikey] screen not locked, doing nothing'
    echoinfo "$msg"
    logger "$msg"
  fi
else

  if $found_key; then
    errormsg="[yubikey] key found with unexpected action '$action'. "
  else
    errormsg="[yubikey] key not found with action '$action'. "
  fi
  errormsg+="This is unexpected."

  echowarning "$errormsg"
  logger "$errormsg"
fi
