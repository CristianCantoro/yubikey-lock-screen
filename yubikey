#!/usr/bin/env bash

SOURCED=false && [ "$0" = "$BASH_SOURCE" ] || SOURCED=true

if ! $SOURCED; then
  set -euo pipefail
  IFS=$'\n\t'
fi

# Double checking if the Yubikey is actually removed,
# Challenge-Response won't trigger the screensaver this way.

# tested with just 1 user at the moment
USERNAME="$(who -u | awk '{print $1}' | sort | uniq)"
uid=$(id -u "$USERNAME")

# get D-bus session
source "/run/user/$uid/dbus-session"
export DBUS_SESSION_BUS_ADDRESS
export DISPLAY=':0'

# delete the lock if older than 30 minutes
find "/run/user/$uid" -type f \
                      -name 'yubikey-lock-screen' \
                      -empty \
                      -cmin +30 \
                      -exec rm "{}" \;

dbus_reply=$(/bin/su $USERNAME -c 'dbus-send --print-reply \
                   --reply-timeout=2000 \
                   --dest=com.canonical.Unity \
                   /com/canonical/Unity/Session \
                   com.canonical.Unity.Session.IsLocked | \
                   grep true || false' )
[ ! -z "$dbus_reply" ] && screen_locked=true || screen_locked=false
# logger "[yubikey] screen_locked: $screen_locked"

yubicokeys=$(lsusb | grep 'Yubico' | \
                     awk -F':' '{print $1}' | \
                     sed -r 's#Bus ([0-9]+) Device ([0-9]+)#\1:\2#g')
key_is_authorized=false
found_key=false

if [ ! -z "$yubicokeys" ]; then
  for serdev in $yubicokeys; do
    serialno=$(lsusb -v -s "$serdev" | \
                  grep iSerial | awk '{ print $NF }' \
                  || true )
    key_is_authorized=$(grep  -qE "^$serialno$" \
                        /home/$USERNAME/.yubico/authorized_yubikeys \
                        && echo true || echo false)
    if $key_is_authorized; then
      break;
    fi
  done

  if $key_is_authorized; then
    logger "[yubikey] yubiKey: ID_SERIAL_SHORT: $ID_SERIAL_SHORT - key authorized"
    found_key=true
  fi
else
  found_key=false
fi

if ! $found_key; then
  logger "[yubikey] yubiKey removed or changed"

  if ! $screen_locked; then
    logger "[yubikey] locking screen"

    # Running the screensaver lock command
    /bin/su $USERNAME \
      -c "/usr/bin/gnome-screensaver-command --lock"

    touch "/run/user/$uid/yubikey-lock-screen"

  else
    logger "[yubikey] screen already locked, doing nothing"
  fi

else
  logger "[yubikey] yubiKey found, unlocking screensaver if found"

  # does not work with the new Unity lock screen
  # Running the screensaver unlock command
  # /bin/su $USERNAME \
  #  -c "/usr/bin/gnome-screensaver-command --deactivate"

  if [ -f "/run/user/$uid/yubikey-lock-screen" ]; then
    logger "[yubikey] screen was locked with yubikey"

    if $screen_locked; then
      logger "[yubikey] unlocking screen"
      loginctl unlock-sessions
    fi

    rm -f "/run/user/$uid/yubikey-lock-screen"
  else
    logger "[yubikey] screen was not locked with yubikey"

  fi

fi
